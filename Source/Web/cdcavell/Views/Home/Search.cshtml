@model cdcavell.Models.Search.SearchModel

<form asp-action="Search" asp-controller="Home" id="SearchRequest">
    <div class="input-group md-form form-sm form-2 shadow-sm pl-0">
        <input class="form-control border-grey my-0 py-1" type="text" placeholder="Search" aria-label="Search" asp-for="SearchRequest" autofocus>
        <div class="input-group-append">
            <span class="input-group-text lighten-3 border-grey p-0 px-1" id="basic-text1">
                <button class="btn btn-link m-0 p-0">
                    <i class="fas fa-search text-grey" aria-hidden="true"></i>
                </button>
            </span>
        </div>
    </div>
    <small class="text-muted font-x-small ml-2">
        <a class="text-decoration-none mr-2" href="https://www.bing.com/" rel="external nofollow noopener" target="_blank">
            <img class="img-fluid bing-logo-xx-small" src="~/img/bing-logo-black-transparent.png" alt="Bing Logo">
        </a>|
        <a class="text-decoration-none ml-2 mr-2" href="https://privacy.microsoft.com/en-us/privacystatement" rel="external nofollow noopener" target="_blank">Microsoft Privacy Statement</a>|
        <a class="text-decoration-none ml-2 mr-2" href="https://docs.microsoft.com/en-us/azure/cognitive-services/bing-web-search/use-display-requirements" rel="external nofollow noopener" target="_blank">Bing Search API use and display requirements</a>|
        <a class="text-decoration-none ml-2" href="https://advertiseonbing.blob.core.windows.net/blob/bingads/media/library/docs/bing-marketing-guidelines.pdf">Bing Marketing Guidelines</a>
    </small>
<br />
<br />
@if (Model.StatusCode == System.Net.HttpStatusCode.NoContent)
{
    <p class="m-2 p-2">
        I have found issues with Pagination in dealing with Bing Custom Search results utilizing offset and totalEstimatedMatches. 
        I have opted to rewrite this feature limiting website results, image results, and video results to a maximum of two hundred 
        results for each category. I then plan on using a separate return object to pull subset of records from initial returned 
        objects from Bing API. This is to provide for a better user experience and besides, if I can't find what I'm looking for in 
        two hundred records then I really need to narrow my search query.
    </p>
}

@if (Model.StatusCode != System.Net.HttpStatusCode.NoContent)
{
    string imageDisabled = Model.ImageResponse.value != null && Model.ImageResponse.value.Count() > 0 ? string.Empty : "disabled";
    string videoDisabled = Model.VideoResponse.value != null && Model.VideoResponse.value.Count() > 0 ? string.Empty : "disabled";

    string searchActive = Model.Tab < 2 ? "active" : string.Empty;
    string imageActive = Model.Tab == 2 ? "active" : string.Empty;
    string videoActive = Model.Tab == 3 ? "active" : string.Empty;

    string searchShow = Model.Tab < 2 ? "show" : string.Empty;
    string imageShow = Model.Tab == 2 ? "show" : string.Empty;
    string videoShow = Model.Tab == 3 ? "show" : string.Empty;

    @Html.HiddenFor(Model => Model.Tab)
    <ul class="nav nav-tabs" id="resultsTab" role="tablist">
      <li class="nav-item border border-bottom-0">
        <a class="nav-link @searchActive" id="search-tab" data-toggle="tab" href="#search" role="tab" aria-controls="search" aria-selected='@(searchActive == "active") ? "true" : "false"'>Search Results</a>
      </li>
      <li class="nav-item border border-bottom-0">
        <a class="nav-link @imageActive @imageDisabled" id="image-tab" data-toggle="tab" href="#image" role="tab" aria-controls="image" aria-selected='@(imageActive == "active") ? "true" : "false"'>Image Results</a>
      </li>
      <li class="nav-item border border-bottom-0">
        <a class="nav-link @videoActive @videoDisabled" id="video-tab" data-toggle="tab" href="#video" role="tab" aria-controls="video" aria-selected='@(imageActive == "active") ? "true" : "false"'>Video Results</a>
      </li>
    </ul>
    <div class="tab-content border border-top-0" id="resultsTabContent">
      <div class="tab-pane fade @searchShow @searchActive" id="search" role="tabpanel" aria-labelledby="search-tab">
        @if (@Model.SearchResponse != null && @Model.SearchResponse.webPages != null)
        {
            @if (Model.SearchResponse.StatusCode != System.Net.HttpStatusCode.OK)
            {
                <div class="shadow alert alert-danger mb-1" role="alert">
                    <strong>Status Code: @Model.SearchResponse.ToString()</strong>
                    <br />@Model.SearchResponse.StatusMessage
                </div>
            }
            else
            {
                @Html.HiddenFor(Model => Model.SearchResponse.PageNumber)
                <div class="card border-0">
                  <div class="card-body">
                    <p class="card-text text-muted">Returned Matches: @Model.SearchResponse.webPages.totalEstimatedMatches</p>
                    <div class="container m-0 p-0">
                        @foreach (SearchPage searchPage in Model.SearchResponse.webPages.value)
                        {
                          <div class="card border-0">
                            <div class="card-body">
                            <h5 class="card-title">
                                <a class="text-decoration-none" href="@searchPage.url" rel="external nofollow noopener" target="_blank">
                                    @searchPage.name
                                </a>               
                            </h5>
                            <h6 class="card-subtitle mb-2 text-muted">
                                <small class="m-0 text-muted">
                                [Last Crawled: @searchPage.dateLastCrawled.ToString("MM/dd/yyyy")] @searchPage.displayUrl
                                </small>
                            </h6>
                            <p class="card-text">@searchPage.snippet</p>
                            </div>
                          </div>
                        }
                    </div>
                  </div>
                </div>
                <div class="card border-0">
                    <div class="card-body">
                        <nav aria-label="Search navigation">
                          <ul class="pagination justify-content-center" id="SearchPagination">
                            @{ 
                                int searchTabCutLow = Model.SearchResponse.PageNumber - 1;
                                int searchTabCutHigh = Model.SearchResponse.PageNumber + 1;

                                string previousDisabled = (Model.SearchResponse.PageNumber == 1) ? "disabled" : string.Empty;
                                string nextDisabled = (Model.SearchResponse.PageNumber == Model.SearchResponse.TotalPages) ? "disabled" : string.Empty;

                                <li class="page-item @previousDisabled"><a class="page-link @previousDisabled" page="@(Model.SearchResponse.PageNumber - 1)" href="#">Previous</a></li>
                                // Show all the pagination elements if there are less than 6 pages total
                                if (Model.SearchResponse.TotalPages < 6)
                                {
                                    for (int i = 1; i <= 6; i++)
                                    {
                                        string active = (i == Model.SearchResponse.PageNumber) ? "active" : string.Empty;
                                        <li class="page-item @active"><a class="page-link" page="@(i)" href="#">@(i)</a></li>
                                    }
                                }
                                else
                                {
                                    // Show the very first page followed by a "..." at the beginning of the
                                    // pagination section (after the Previous button)
                                    if (Model.SearchResponse.PageNumber > 2)
                                    {
                                        <li class="page-item"><a class="page-link" page="1" href="#">1</a></li>
                                        @if (Model.SearchResponse.PageNumber > 3)
                                        {
                                            <li class="page-item"><a class="page-link" page="@(Model.SearchResponse.PageNumber - 2)" href="#">...</a></li>
                                        }
                                    }
                                    // Determine how many pages to show after the current page index
                                    @if (Model.SearchResponse.PageNumber == 1)
                                    {
                                        searchTabCutHigh += 2;
                                    }
                                    else
                                    {
                                        if (Model.SearchResponse.PageNumber == 2)
                                        {
                                            searchTabCutHigh += 1;
                                        }
                                    }
                                    // Determine how many pages to show before the current page index
                                    @if (Model.SearchResponse.PageNumber == Model.SearchResponse.TotalPages)
                                    {
                                        searchTabCutLow -= 2;
                                    }
                                    else
                                    {
                                        if (Model.SearchResponse.PageNumber == Model.SearchResponse.TotalPages - 1)
                                        {
                                            searchTabCutLow -= 1;
                                        }
                                    }
                                    // Output the indexes for pages that fall inside the range of TabCutLow
                                    // and TabCutHigh
                                    @for (int i = searchTabCutLow; i <= searchTabCutHigh; i++)
                                    {
                                        if (i == 0)
                                        {
                                            i += 1;
                                        }
                                        if (i > Model.SearchResponse.TotalPages)
                                        {
                                            continue;
                                        }

                                        string active = (i == Model.SearchResponse.PageNumber) ? "active" : string.Empty;
                                        <li class="page-item @active"><a class="page-link" page="@(i)" href="#">@(i)</a></li>
                                    }
                                    // Show the very last page preceded by a "..." at the end of the pagination
                                    // section (before the Next button)
                                    @if (Model.SearchResponse.PageNumber < Model.SearchResponse.TotalPages - 1)
                                    {
                                        if (Model.SearchResponse.PageNumber < Model.SearchResponse.TotalPages - 2)
                                        {
                                            <li class="page-item"><a class="page-link" page="@(Model.SearchResponse.PageNumber + 2)" href="#">...</a></li>
                                        }
                                        <li class="page-item"><a class="page-link" page="@Model.SearchResponse.TotalPages" href="#">@Model.SearchResponse.TotalPages</a></li>
                                    }
                                }
                                <li class="page-item @nextDisabled"><a class="page-link @nextDisabled" page="@(Model.SearchResponse.PageNumber + 1)" href="#">Next</a></li>
                            }
                          </ul>
                        </nav>
                    </div>
                </div>
            }
        }
      </div>
      <div class="tab-pane fade @imageShow @imageActive" id="image" role="tabpanel" aria-labelledby="image-tab">
        @if (@Model.ImageResponse != null)
        {
            @if (Model.ImageResponse.StatusCode != System.Net.HttpStatusCode.OK)
            {
                <div class="shadow alert alert-danger mb-1" role="alert">
                    <strong>Status Code: @Model.ImageResponse.ToString()</strong>
                    <br />@Model.ImageResponse.StatusMessage
                </div>
            }
            else
            {
                @Html.HiddenFor(Model => Model.ImageResponse.PageNumber)
                <div class="card border-0">
                  <div class="card-body">
                    <p class="card-text text-muted">Returned Matches: @Model.ImageResponse.totalEstimatedMatches</p>
                    <div class="container">
                        <div class="row text-center text-lg-left">
                        @foreach (ImagePage imagePage in Model.ImageResponse.value)
                        {
                            <div class="col-lg-3 col-md-4 col-6">
                              <a href="@imagePage.contentUrl" class="d-block mb-4 h-100" rel="external nofollow noopener" target="_blank">
                                <img class="img-fluid img-thumbnail" src="@imagePage.thumbnailUrl" alt="">
                              </a>
                            </div>
                        }
                        </div>
                    </div>
                  </div>
                </div>
                <div class="card border-0">
                    <div class="card-body">
                        <nav aria-label="Image navigation">
                          <ul class="pagination justify-content-center" id="ImagePagination">
                            @{ 
                                int imageTabCutLow = Model.ImageResponse.PageNumber - 1;
                                int imageTabCutHigh = Model.ImageResponse.PageNumber + 1;

                                string previousDisabled = (Model.ImageResponse.PageNumber == 1) ? "disabled" : string.Empty;
                                string nextDisabled = (Model.ImageResponse.PageNumber == Model.ImageResponse.TotalPages) ? "disabled" : string.Empty;

                                <li class="page-item @previousDisabled"><a class="page-link @previousDisabled" page="@(Model.ImageResponse.PageNumber - 1)">Previous</a></li>
                                // Show all the pagination elements if there are less than 6 pages total
                                if (Model.ImageResponse.TotalPages < 6)
                                {
                                    for (int i = 1; i <= 6; i++)
                                    {
                                        string active = (i == Model.ImageResponse.PageNumber) ? "active" : string.Empty;
                                        <li class="page-item @active"><a class="page-link" page="@(i)" href="#">@(i)</a></li>
                                    }
                                }
                                else
                                {
                                    // Show the very first page followed by a "..." at the beginning of the
                                    // pagination section (after the Previous button)
                                    if (Model.ImageResponse.PageNumber > 2)
                                    {
                                        <li class="page-item"><a class="page-link" page="1" href="#">1</a></li>
                                        @if (Model.ImageResponse.PageNumber > 3)
                                        {
                                            <li class="page-item"><a class="page-link" page="@(Model.ImageResponse.PageNumber - 2)" href="#">...</a></li>
                                        }
                                    }
                                    // Determine how many pages to show after the current page index
                                    @if (Model.ImageResponse.PageNumber == 1)
                                    {
                                        imageTabCutHigh += 2;
                                    }
                                    else
                                    {
                                        if (Model.ImageResponse.PageNumber == 2)
                                        {
                                            imageTabCutHigh += 1;
                                        }
                                    }
                                    // Determine how many pages to show before the current page index
                                    @if (Model.ImageResponse.PageNumber == Model.ImageResponse.TotalPages)
                                    {
                                        imageTabCutLow -= 2;
                                    }
                                    else
                                    {
                                        if (Model.ImageResponse.PageNumber == Model.ImageResponse.TotalPages - 1)
                                        {
                                            imageTabCutLow -= 1;
                                        }
                                    }
                                    // Output the indexes for pages that fall inside the range of TabCutLow
                                    // and TabCutHigh
                                    @for (int i = imageTabCutLow; i <= imageTabCutHigh; i++)
                                    {
                                        if (i == 0)
                                        {
                                            i += 1;
                                        }
                                        if (i > Model.ImageResponse.TotalPages)
                                        {
                                            continue;
                                        }

                                        string active = (i == Model.ImageResponse.PageNumber) ? "active" : string.Empty;
                                        <li class="page-item @active"><a class="page-link" page="@(i)" href="#">@(i)</a></li>
                                    }
                                    // Show the very last page preceded by a "..." at the end of the pagination
                                    // section (before the Next button)
                                    @if (Model.ImageResponse.PageNumber < Model.ImageResponse.TotalPages - 1)
                                    {
                                        if (Model.ImageResponse.PageNumber < Model.ImageResponse.TotalPages - 2)
                                        {
                                            <li class="page-item"><a class="page-link" page="@(Model.ImageResponse.PageNumber + 2)" href="#">...</a></li>
                                        }
                                        <li class="page-item"><a class="page-link" page="@Model.ImageResponse.TotalPages" href="#">@Model.ImageResponse.TotalPages</a></li>
                                    }
                                }
                                <li class="page-item @nextDisabled"><a class="page-link @nextDisabled" page="@(Model.ImageResponse.PageNumber + 1)" href="#">Next</a></li>
                            }
                          </ul>
                        </nav>
                    </div>
                </div>
            }
        }
      </div>

      <div class="tab-pane fade @videoShow @videoActive" id="video" role="tabpanel" aria-labelledby="video-tab">
            @if (Model.VideoResponse.StatusCode != System.Net.HttpStatusCode.OK)
            {
                <div class="shadow alert alert-danger mb-1" role="alert">
                    <strong>Status Code: @Model.VideoResponse.ToString()</strong>
                    <br />@Model.VideoResponse.StatusMessage
                </div>
            }
            else 
            { 
                @Html.HiddenFor(Model => Model.VideoResponse.PageNumber)
                <div class="card border-0">
                  <div class="card-body">
                    <p class="card-text text-muted">Returned Matches: @Model.VideoResponse.totalEstimatedMatches</p>
                    <div class="container">
                        <div class="row text-center text-lg-left">
                        @foreach (VideoPage videoPage in Model.VideoResponse.value)
                        {
                            <div class="row">
                                <div class="col-3 pt-3">
                                    <a href="@videoPage.contentUrl" class="d-block mb-4 h-100" rel="external nofollow noopener" target="_blank">
                                        <img class="img-fluid img-thumbnail" src="@videoPage.thumbnailUrl" alt="">
                                    </a>
                                </div>
                                <div class="col-9">
                                    <div class="card border-0">
                                    <div class="card-body">
                                    <h5 class="card-title">
                                        <a class="text-decoration-none" href="@videoPage.hostPageUrl" rel="external nofollow noopener" target="_blank">
                                            @videoPage.name
                                        </a>               
                                    </h5>
                                    <h6 class="card-subtitle mb-2 text-muted">
                                    <small class="m-0 text-muted">
                                        [Date Published: @videoPage.datePublished.ToString("MM/dd/yyyy")]
                                    </small>
                                    </h6>
                                    <p class="card-text">@videoPage.description</p>
                                    </div>
                                    </div>
                                </div>
                            </div>
                        }
                        </div>
                    </div>
                  </div>
                </div>
                <div class="card border-0">
                    <div class="card-body">
                        <nav aria-label="Video navigation">
                          <ul class="pagination justify-content-center" id="VideoPagination">
                            @{ 
                                int videoTabCutLow = Model.VideoResponse.PageNumber - 1;
                                int videoTabCutHigh = Model.VideoResponse.PageNumber + 1;

                                string previousDisabled = (Model.VideoResponse.PageNumber == 1) ? "disabled" : string.Empty;
                                string nextDisabled = (Model.VideoResponse.PageNumber == Model.VideoResponse.TotalPages) ? "disabled" : string.Empty;

                                <li class="page-item @previousDisabled"><a class="page-link @previousDisabled" page="@(Model.VideoResponse.PageNumber - 1)">Previous</a></li>
                                // Show all the pagination elements if there are less than 6 pages total
                                if (Model.VideoResponse.TotalPages < 6)
                                {
                                    for (int i = 1; i <= 6; i++)
                                    {
                                        string active = (i == Model.VideoResponse.PageNumber) ? "active" : string.Empty;
                                        <li class="page-item @active"><a class="page-link" page="@(i)" href="#">@(i)</a></li>
                                    }
                                }
                                else
                                {
                                    // Show the very first page followed by a "..." at the beginning of the
                                    // pagination section (after the Previous button)
                                    if (Model.VideoResponse.PageNumber > 2)
                                    {
                                        <li class="page-item"><a class="page-link" page="1" href="#">1</a></li>
                                        @if (Model.VideoResponse.PageNumber > 3)
                                        {
                                            <li class="page-item"><a class="page-link" page="@(Model.VideoResponse.PageNumber - 2)" href="#">...</a></li>
                                        }
                                    }
                                    // Determine how many pages to show after the current page index
                                    @if (Model.VideoResponse.PageNumber == 1)
                                    {
                                        videoTabCutHigh += 2;
                                    }
                                    else
                                    {
                                        if (Model.VideoResponse.PageNumber == 2)
                                        {
                                            videoTabCutHigh += 1;
                                        }
                                    }
                                    // Determine how many pages to show before the current page index
                                    @if (Model.VideoResponse.PageNumber == Model.VideoResponse.TotalPages)
                                    {
                                        videoTabCutLow -= 2;
                                    }
                                    else
                                    {
                                        if (Model.VideoResponse.PageNumber == Model.VideoResponse.TotalPages - 1)
                                        {
                                            videoTabCutLow -= 1;
                                        }
                                    }
                                    // Output the indexes for pages that fall inside the range of TabCutLow
                                    // and TabCutHigh
                                    @for (int i = videoTabCutLow; i <= videoTabCutHigh; i++)
                                    {
                                        if (i == 0)
                                        {
                                            i += 1;
                                        }
                                        if (i > Model.VideoResponse.TotalPages)
                                        {
                                            continue;
                                        }

                                        string active = (i == Model.VideoResponse.PageNumber) ? "active" : string.Empty;
                                        <li class="page-item @active"><a class="page-link" page="@(i)" href="#">@(i)</a></li>
                                    }
                                    // Show the very last page preceded by a "..." at the end of the pagination
                                    // section (before the Next button)
                                    @if (Model.VideoResponse.PageNumber < Model.VideoResponse.TotalPages - 1)
                                    {
                                        if (Model.VideoResponse.PageNumber < Model.VideoResponse.TotalPages - 2)
                                        {
                                            <li class="page-item"><a class="page-link" page="@(Model.VideoResponse.PageNumber + 2)" href="#">...</a></li>
                                        }
                                        <li class="page-item"><a class="page-link" page="@Model.VideoResponse.TotalPages" href="#">@Model.VideoResponse.TotalPages</a></li>
                                    }
                                }
                                <li class="page-item @nextDisabled"><a class="page-link @nextDisabled" page="@(Model.VideoResponse.PageNumber + 1)" href="#">Next</a></li>
                            }
                          </ul>
                        </nav>
                    </div>
                </div>
            }
      </div>
    </div>
}

</form>

@section scripts {
<script type="text/javascript" nonce="@ViewBag.ScriptNonce">

    $('#SearchPagination li').click(function () {
        if (!$('a', this).hasClass('disabled')) {
            $('#SearchResponse_PageNumber').val($('a', this).attr('page'));
            $("#SearchRequest").submit();
        }
        return false;
    });

    $('#ImagePagination li').click(function () {
        if (!$('a', this).hasClass('disabled')) {
            $('#ImageResponse_PageNumber').val($('a', this).attr('page'));
            $("#SearchRequest").submit();
        }
        return false;
    });

    $('#VideoPagination li').click(function () {
        if (!$('a', this).hasClass('disabled')) {
            $('#VideoResponse_PageNumber').val($('a', this).attr('page'));
            $("#SearchRequest").submit();
        }
        return false;
    });

    $('#resultsTab li').click(function () {
        switch ($(this).text().trim()) {
            case 'Search Results':
                if (!$('a', this).hasClass('disabled')) {
                    $('#Tab').val(1);
                }
                break;
            case 'Image Results':
                if (!$('a', this).hasClass('disabled')) {
                    $('#Tab').val(2);
                }
                break;
            case 'Video Results':
                if (!$('a', this).hasClass('disabled')) {
                    $('#Tab').val(3);
                }
                break;
        }
    });

</script>
}
