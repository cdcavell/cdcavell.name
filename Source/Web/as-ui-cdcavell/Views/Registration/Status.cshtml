@model RegistrationIndexModel

<h1 class="h2 mb-1">
    Account Information
</h1>

@using (Html.BeginForm("Delete", "Registration", FormMethod.Post, new { id = "form", suppressSubmit = "false", showWarning = "true" }))
{
    <div class="card shadow-sm pl-0">
        <div class="card-body rounded-top bg-white">
            <div class="d-flex flex-row">
                <p class="font-small text-muted">
                    Registration
                    @if (Model.PendingValidation)
                    { 
                        <span class="ml-4 pl-2 text-center text-danger small font-weight-bold font-italic">
                            An email notification has been issued. Email address validation is required before approving registration.
                       </span>
                            <a id="resendNotification"
                               type="button"
                               class="btn btn-dark btn-sm small ml-4 text-light"
                               asp-action="Update"
                               asp-controller="Registration">
                               Resend Notification
                               <i class="fas fa-envelope-open-text text-grey ml-2" aria-hidden="true"></i>
                            </a>
                    }
                </p>
            </div>
            <div class="form-group row m-0 p-0">
                <div class="col-sm-1 col-md-1 p-1">
                    @Html.LabelFor(model => model.Email)
                </div>
                <div class="col-sm-11 col-md-11">
                    @Html.TextBoxFor(model => model.Email, new { @readonly = "readonly", @class = "form-control form-control-sm m-0" })
                </div>
            </div>
            <div class="form-group row m-0 p-0">
                <div class="col-sm-1 col-md-1 p-1">
                    @Html.LabelFor(model => model.RequestDate)
                </div>
                <div class="col-sm-5 col-md-5">
                    @Html.TextBoxFor(model => model.RequestDate, "{0:MMM dd, yyyy}", new { @readonly = "readonly", @class = "form-control form-control-sm m-0" })
                </div>
                <div class="col-sm-1 col-md-1 p-1">
                    @Html.LabelFor(model => model.Status)
                </div>
                <div class="col-sm-5 col-md-5">
                    @Html.TextBoxFor(model => model.Status, new { @readonly = "readonly", @class = "form-control form-control-sm m-0" })
                </div>
            </div>
            <div class="form-group row m-0 p-0">
                <div class="col-sm-1 col-md-1 p-1">
                    @Html.LabelFor(model => model.FirstName)
                </div>
                <div class="col-sm-5 col-md-5">
                    @Html.TextBoxFor(model => model.FirstName, new { @readonly = "readonly", @class = "form-control form-control-sm m-0" })
                </div>
                <div class="col-sm-1 col-md-1 p-1">
                    @Html.LabelFor(model => model.LastName)
                </div>
                <div class="col-sm-5 col-md-5">
                    @Html.TextBoxFor(model => model.LastName, new { @readonly = "readonly", @class = "form-control form-control-sm m-0" })
                </div>
            </div>
            <br />
            @if (Model.RolePermissions != null && Model.RolePermissions.Count > 0)
            {
                <p class="font-small text-muted">
                    Role Permissions
                </p>
                <!--Accordion wrapper-->
                <div class="accordion md-accordion" id="accordionRolePermissions" role="tablist" aria-multiselectable="true">

                @{
                    List<ResourceModel> resources = Model.RolePermissions
                        .Select(x => x.Role.Resource)
                        .DistinctBy(x => x.ResourceId)
                        .OrderBy(x => x.Description)
                        .ToList();
                }

                @foreach (ResourceModel resource in resources)
                {
                    <!-- Accordion card -->
                    <div class="card mr-4">
                        <!-- Card header -->
                        <div class="card-header bg-readonly m-0 p-0 pt-1 pl-2" role="tab" id="heading-@resource.ResourceId">
                            <a class="text-decoration-none" data-toggle="collapse" data-parent="#accordionRolePermissions" href="#collapse-@resource.ResourceId" aria-expanded="false" aria-controls="collapse-@resource.ResourceId">
                                <p class="font-small mb-0">
                                    @resource.Description
                                </p>
                            </a>
                        </div>
                        <!-- Card body -->
                        <div id="collapse-@resource.ResourceId" class="collapse font-small m-0 p-0" role="tabpanel" aria-labelledby="heading-@resource.ResourceId" data-parent="#accordionRolePermissions">
                            @{ 
                                List<RolePermissionModel> rolePermissions = Model.RolePermissions
                                    .Where(x => x.Role.Resource.ResourceId == resource.ResourceId)
                                    .OrderBy(x => x.Role.Description)
                                    .ToList();
                            }                          
                            <div class="container">
                            @foreach (RolePermissionModel rolePermission in rolePermissions)
                            {
                                <div class="row align-items-start">
                                    <div class="col col-sm-auto mt-2">Role</div>
                                    <div class="col col-sm form-control-sm text-readonly bg-readonly border-readonly my-1">@rolePermission.Role.Description</div>
                                    <div class="col col-sm-auto mt-2">Permission</div>
                                    <div class="col col-sm form-control-sm text-readonly bg-readonly border-readonly my-1">@rolePermission.Permission.Description</div>
                                    <div class="col col-sm-auto mt-2">Status</div>
                                    <div class="col col-sm form-control-sm text-readonly bg-readonly border-readonly my-1">@rolePermission.Status.Description</div>
                                </div>
                            }
                            </div>
                        </div>
                    </div>
                }
                </div>
            }
        </div>
        <div class="card-footer rounded-bottom bg-white border-top-0 m-0 p-0">
            @if (Model.Status.Equals("Account Active", StringComparison.CurrentCultureIgnoreCase)
              || Model.Status.Equals("Pending Approval", StringComparison.CurrentCultureIgnoreCase))
            {
                <button id="revokeAccount"
                        type="submit"
                        class="btn btn-dark text-light border shadow-sm text-decoration-none m-3 mr-4 p-1 px-2 float-right g-recaptcha"
                        data-sitekey="@ViewBag.reCAPTCHA_SiteKey"
                        data-callback='onCaptchaSubmit'
                        data-action='submit'>
                    <i class="fas fa-trash-alt text-grey" aria-hidden="true"></i>
                    Revoke Account
                </button>

                <a id="updateAccount"
                   type="button"
                   class="btn btn-dark text-light border shadow-sm text-decoration-none m-3 mr-0 p-1 pr-0 px-2 float-right"
                   asp-action="Update"
                   asp-controller="Registration">
                    <i class="fas fa-user-edit text-grey" aria-hidden="true"></i>
                    Update Account
                </a>
            }
        </div>
    </div>       
}


@section scripts {
}
